#!/bin/bash

# 監視システムセットアップスクリプト
# 初回セットアップ用の対話型スクリプト

set -e

# カラー定義
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ログ関数
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 設定
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
TERRAFORM_DIR="$PROJECT_ROOT/terraform/environments/prod"

# ユーザー入力関数
prompt_input() {
    local prompt="$1"
    local default="$2"
    local sensitive="$3"
    local value
    
    if [ "$sensitive" = "true" ]; then
        echo -n "$prompt: "
        read -s value
        echo
    else
        if [ -n "$default" ]; then
            echo -n "$prompt [$default]: "
        else
            echo -n "$prompt: "
        fi
        read value
    fi
    
    if [ -z "$value" ] && [ -n "$default" ]; then
        value="$default"
    fi
    
    echo "$value"
}

# 設定ファイル作成
create_config_file() {
    log_info "設定ファイルを作成します"
    
    cd "$TERRAFORM_DIR"
    
    if [ -f "terraform.tfvars" ]; then
        log_warning "terraform.tfvarsファイルが既に存在します"
        echo -n "上書きしますか？ (y/N): "
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            log_info "設定ファイル作成をスキップしました"
            return
        fi
    fi
    
    log_info "設定値を入力してください（空白の場合はデフォルト値を使用）"
    
    # 基本設定
    echo "=== 基本設定 ==="
    APP_NAME=$(prompt_input "アプリケーション名" "english-cafe-prod")
    
    # New Relic設定
    echo -e "\n=== New Relic設定 ==="
    log_info "New Relicアカウント情報を入力してください"
    log_info "取得方法: https://one.newrelic.com → Account settings"
    NR_ACCOUNT_ID=$(prompt_input "New Relic Account ID")
    NR_API_KEY=$(prompt_input "New Relic API Key" "" "true")
    NR_LICENSE_KEY=$(prompt_input "New Relic License Key" "" "true")
    
    # Grafana設定
    echo -e "\n=== Grafana Cloud設定 ==="
    log_info "Grafana Cloudアカウント情報を入力してください"
    GRAFANA_URL=$(prompt_input "Grafana URL" "https://your-org.grafana.net")
    GRAFANA_TOKEN=$(prompt_input "Grafana Service Account Token" "" "true")
    GRAFANA_PROMETHEUS=$(prompt_input "Grafana Prometheus Endpoint" "https://prometheus-prod-01-eu-west-0.grafana.net/api/prom")
    GRAFANA_API_KEY=$(prompt_input "Grafana API Key" "" "true")
    
    # Vercel設定
    echo -e "\n=== Vercel設定 ==="
    log_info "Vercelアカウント情報を入力してください"
    VERCEL_TOKEN=$(prompt_input "Vercel API Token" "" "true")
    VERCEL_PROJECT=$(prompt_input "Vercel Project Name" "english-cafe")
    CUSTOM_DOMAIN=$(prompt_input "カスタムドメイン（オプション）" "")
    
    # Render設定
    echo -e "\n=== Render設定 ==="
    log_info "Renderアカウント情報を入力してください"
    RENDER_API_KEY=$(prompt_input "Render API Key" "" "true")
    RENDER_SERVICE=$(prompt_input "Render Service Name" "english-cafe-api")
    
    # GitHub設定
    echo -e "\n=== GitHub設定 ==="
    GITHUB_REPO=$(prompt_input "GitHub Repository (owner/repo)" "your-org/english-cafe-website")
    
    # 通知設定
    echo -e "\n=== 通知設定 ==="
    ADMIN_EMAIL=$(prompt_input "管理者メールアドレス")
    SLACK_WEBHOOK=$(prompt_input "Slack Webhook URL（オプション）" "" "true")
    
    # メール設定
    echo -e "\n=== メール設定（バックエンド用） ==="
    SMTP_USERNAME=$(prompt_input "SMTP Username")
    SMTP_PASSWORD=$(prompt_input "SMTP Password" "" "true")
    
    # セキュリティ設定
    echo -e "\n=== セキュリティ設定 ==="
    APP_SECRET=$(prompt_input "アプリケーションシークレットキー" "" "true")
    
    # terraform.tfvarsファイル作成
    cat > terraform.tfvars << EOF
# English Cafe Monitoring Configuration
# Generated by setup script on $(date)

# Application Configuration
application_name = "$APP_NAME"

# New Relic Configuration
newrelic_account_id  = "$NR_ACCOUNT_ID"
newrelic_api_key     = "$NR_API_KEY"
newrelic_license_key = "$NR_LICENSE_KEY"

# Grafana Configuration
grafana_url                  = "$GRAFANA_URL"
grafana_auth_token          = "$GRAFANA_TOKEN"
grafana_prometheus_endpoint = "$GRAFANA_PROMETHEUS"
grafana_api_key            = "$GRAFANA_API_KEY"

# Vercel Configuration
vercel_api_token    = "$VERCEL_TOKEN"
vercel_project_name = "$VERCEL_PROJECT"
EOF

    if [ -n "$CUSTOM_DOMAIN" ]; then
        echo "custom_domain       = \"$CUSTOM_DOMAIN\"" >> terraform.tfvars
    else
        echo "custom_domain       = \"\"" >> terraform.tfvars
    fi

    cat >> terraform.tfvars << EOF

# Render Configuration
render_service_name = "$RENDER_SERVICE"
render_api_key     = "$RENDER_API_KEY"

# GitHub Configuration
github_repository = "$GITHUB_REPO"

# Notification Configuration
admin_email      = "$ADMIN_EMAIL"
EOF

    if [ -n "$SLACK_WEBHOOK" ]; then
        echo "slack_webhook_url = \"$SLACK_WEBHOOK\"" >> terraform.tfvars
    else
        echo "slack_webhook_url = \"\"" >> terraform.tfvars
    fi

    cat >> terraform.tfvars << EOF

# Email Configuration (for backend)
smtp_username = "$SMTP_USERNAME"
smtp_password = "$SMTP_PASSWORD"

# Application Security
app_secret_key = "$APP_SECRET"

# Runbook Configuration
runbook_url = "https://github.com/$GITHUB_REPO/wiki/runbooks"

# Feature Flags
enable_business_alerts   = true
enable_performance_alerts = true
enable_error_alerts      = true

# Alert Thresholds (Production - Strict)
alert_thresholds = {
  error_rate_critical    = 2
  error_rate_warning     = 1
  response_time_critical = 2000
  response_time_warning  = 1500
  memory_usage_critical  = 80
  memory_usage_warning   = 70
  lcp_critical          = 2500
  lcp_warning           = 2000
  fid_critical          = 100
  fid_warning           = 75
  cls_critical          = 0.1
  cls_warning           = 0.05
}

# Cost Management
monthly_budget_limit = 50

# Data Retention
data_retention_days = 90
log_retention_days  = 30

# Backup Configuration
enable_backup    = true
backup_schedule  = "0 2 * * *"

# Security Configuration
allowed_ip_ranges = ["0.0.0.0/0"]
enable_encryption = true

# Scaling Configuration
auto_scaling_enabled   = false
scale_up_threshold    = 80
scale_down_threshold  = 30

# Email Configuration (SMTP)
smtp_host = "smtp.gmail.com"
smtp_port = "587"

# Third-party Integrations (Optional)
enable_third_party_integrations = false
datadog_api_key                = ""
splunk_token                   = ""
EOF

    log_success "terraform.tfvarsファイルを作成しました"
}

# Terraform Cloud設定ガイド
show_terraform_cloud_guide() {
    log_info "Terraform Cloud設定ガイド"
    echo "=========================================="
    echo "1. https://app.terraform.io/ にアクセス"
    echo "2. 新しいOrganization 'english-cafe' を作成"
    echo "3. 新しいWorkspace 'monitoring-prod' を作成"
    echo "4. Workspace設定で以下の環境変数を設定:"
    echo "   - TF_VAR_newrelic_api_key (sensitive)"
    echo "   - TF_VAR_newrelic_license_key (sensitive)"
    echo "   - TF_VAR_grafana_auth_token (sensitive)"
    echo "   - TF_VAR_vercel_api_token (sensitive)"
    echo "   - TF_VAR_render_api_key (sensitive)"
    echo "   - TF_VAR_slack_webhook_url (sensitive)"
    echo "   - TF_VAR_smtp_password (sensitive)"
    echo "   - TF_VAR_app_secret_key (sensitive)"
    echo "=========================================="
    echo ""
    echo -n "Terraform Cloudの設定が完了したら Enter を押してください..."
    read
}

# 次のステップ表示
show_next_steps() {
    log_success "セットアップが完了しました！"
    echo ""
    log_info "次のステップ:"
    echo "1. 設定を検証: ./scripts/validate-config.sh"
    echo "2. デプロイ実行: ./scripts/deploy-monitoring.sh"
    echo "3. 詳細ガイド: cat ../MONITORING_DEPLOYMENT_GUIDE.md"
    echo ""
    log_warning "重要: terraform.tfvarsファイルには機密情報が含まれています"
    log_warning "このファイルをGitにコミットしないでください"
}

# メイン関数
main() {
    log_info "英会話カフェ監視システムセットアップを開始します"
    
    create_config_file
    show_terraform_cloud_guide
    show_next_steps
}

# スクリプト実行
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi